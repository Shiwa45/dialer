# docker-compose.yml

version: '3.8'

services:
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: autodialer_db
      POSTGRES_USER: autodialer_user
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

  web:
    build: .
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    environment:
      - DEBUG=1
      - SECRET_KEY=your-secret-key-change-in-production
      - DB_NAME=autodialer_db
      - DB_USER=autodialer_user
      - DB_PASSWORD=password
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379
    restart: unless-stopped

  celery:
    build: .
    command: celery -A autodialer worker --loglevel=info
    volumes:
      - .:/app
      - media_volume:/app/media
    depends_on:
      - db
      - redis
    environment:
      - DEBUG=1
      - SECRET_KEY=your-secret-key-change-in-production
      - DB_NAME=autodialer_db
      - DB_USER=autodialer_user
      - DB_PASSWORD=password
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379
    restart: unless-stopped

  celery-beat:
    build: .
    command: celery -A autodialer beat --loglevel=info
    volumes:
      - .:/app
    depends_on:
      - db
      - redis
    environment:
      - DEBUG=1
      - SECRET_KEY=your-secret-key-change-in-production
      - DB_NAME=autodialer_db
      - DB_USER=autodialer_user
      - DB_PASSWORD=password
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/var/www/static
      - media_volume:/var/www/media
    depends_on:
      - web
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:

---
# Dockerfile

FROM python:3.11-slim

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# Set work directory
WORKDIR /app

# Install system dependencies
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        postgresql-client \
        build-essential \
        libpq-dev \
        netcat-traditional \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
COPY requirements.txt /app/
RUN pip install --no-cache-dir -r requirements.txt

# Copy project
COPY . /app/

# Create necessary directories
RUN mkdir -p /app/staticfiles /app/media /app/logs

# Collect static files
RUN python manage.py collectstatic --noinput

# Create entrypoint script
RUN echo '#!/bin/bash\n\
set -e\n\
\n\
# Wait for postgres\n\
while ! nc -z db 5432; do\n\
  echo "Waiting for postgres..."\n\
  sleep 1\n\
done\n\
\n\
echo "PostgreSQL started"\n\
\n\
# Run migrations\n\
python manage.py migrate\n\
\n\
# Execute the main container command\n\
exec "$@"' > /app/entrypoint.sh

RUN chmod +x /app/entrypoint.sh

ENTRYPOINT ["/app/entrypoint.sh"]

---
# nginx.conf

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    upstream web {
        server web:8000;
    }
    
    server {
        listen 80;
        server_name localhost;
        
        client_max_body_size 50M;
        
        location /static/ {
            alias /var/www/static/;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        location /media/ {
            alias /var/www/media/;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        location / {
            proxy_pass http://web;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
        }
        
        location /ws/ {
            proxy_pass http://web;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}

---
# .env.example

# Django Settings
SECRET_KEY=your-secret-key-change-in-production
DEBUG=True
ALLOWED_HOSTS=localhost,127.0.0.1

# Database Settings
DB_NAME=autodialer_db
DB_USER=autodialer_user
DB_PASSWORD=password
DB_HOST=localhost
DB_PORT=5432

# Redis Settings
REDIS_URL=redis://localhost:6379

# Email Settings
EMAIL_HOST=localhost
EMAIL_PORT=587
EMAIL_USE_TLS=True
EMAIL_HOST_USER=
EMAIL_HOST_PASSWORD=
DEFAULT_FROM_EMAIL=autodialer@localhost

# Asterisk Settings
AMI_HOST=localhost
AMI_PORT=5038
AMI_USERNAME=admin
AMI_PASSWORD=password
ARI_HOST=localhost
ARI_PORT=8088
ARI_USERNAME=asterisk
ARI_PASSWORD=password

# Autodialer Settings
MAX_CONCURRENT_CALLS=100
CALL_TIMEOUT=30
RECORDING_PATH=/app/media/recordings
LEAD_IMPORT_CHUNK_SIZE=1000
AGENT_TIMEOUT=300