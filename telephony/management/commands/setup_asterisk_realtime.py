# Create this file: telephony/management/commands/setup_asterisk_realtime.py
# First create the directories: mkdir -p telephony/management/commands

from django.core.management.base import BaseCommand
from django.db import connection
from telephony.models import Phone, PsEndpoint, PsAuth, PsAor

class Command(BaseCommand):
    help = 'Setup Asterisk Realtime integration and sync existing phones'

    def add_arguments(self, parser):
        parser.add_argument(
            '--sync-existing',
            action='store_true',
            help='Sync all existing phones to Asterisk realtime tables',
        )
        parser.add_argument(
            '--create-config',
            action='store_true',
            help='Generate Asterisk configuration files for realtime',
        )

    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS('üöÄ Setting up Asterisk Realtime Integration (GOautoDial Style)')
        )
        
        # Verify tables exist
        self.verify_tables()
        
        # Sync existing phones if requested
        if options['sync_existing']:
            self.sync_existing_phones()
        
        # Create config files if requested
        if options['create_config']:
            self.create_asterisk_config()
        
        self.stdout.write(
            self.style.SUCCESS('\n‚úÖ Asterisk Realtime setup completed!')
        )
        self.stdout.write(
            '\nüìã Next Steps:'
        )
        self.stdout.write('  1. Configure Asterisk extconfig.conf (see generated file)')
        self.stdout.write('  2. Configure Asterisk res_odbc.conf for database connection')
        self.stdout.write('  3. Restart Asterisk: sudo systemctl restart asterisk')
        self.stdout.write('  4. Test phone registration with your softphone')

    def verify_tables(self):
        """Verify that Asterisk realtime tables exist"""
        cursor = connection.cursor()
        
        tables = ['ps_endpoints', 'ps_auths', 'ps_aors', 'extensions_table']
        
        for table in tables:
            try:
                cursor.execute(f"SELECT COUNT(*) FROM {table}")
                count = cursor.fetchone()[0]
                self.stdout.write(f"‚úÖ Table {table}: {count} records")
            except Exception as e:
                self.stdout.write(
                    self.style.ERROR(f"‚ùå Table {table} not found: {e}")
                )
                return False
        return True

    def sync_existing_phones(self):
        """Sync all existing Django phones to Asterisk realtime tables"""
        self.stdout.write('\nüìû Syncing existing phones to Asterisk...')
        
        phones = Phone.objects.filter(is_active=True)
        synced_count = 0
        
        for phone in phones:
            try:
                if phone.sync_to_asterisk():
                    synced_count += 1
                    self.stdout.write(f"  ‚úÖ Synced {phone.extension} - {phone.name}")
                else:
                    self.stdout.write(f"  ‚ùå Failed to sync {phone.extension}")
            except Exception as e:
                self.stdout.write(f"  ‚ùå Error syncing {phone.extension}: {e}")
        
        self.stdout.write(
            self.style.SUCCESS(f'\nüìä Synced {synced_count} out of {phones.count()} phones')
        )

    def create_asterisk_config(self):
        """Generate Asterisk configuration files for realtime"""
        self.stdout.write('\nüìù Generating Asterisk configuration files...')
        
        # Generate extconfig.conf
        extconfig_content = """; extconfig.conf - Asterisk Realtime Configuration
; Generated by Django Autodialer System

[settings]
; PJSIP Realtime Configuration
ps_endpoints => odbc,asterisk,ps_endpoints
ps_auths => odbc,asterisk,ps_auths
ps_aors => odbc,asterisk,ps_aors

; Dialplan Realtime (optional)
; extensions => odbc,asterisk,extensions_table
"""

        # Generate res_odbc.conf template
        odbc_content = """; res_odbc.conf - Database Connection Configuration
; Generated by Django Autodialer System
; 
; IMPORTANT: Update with your actual database credentials

[asterisk]
enabled => yes
dsn => your_database_name
username => your_db_user
password => your_db_password
pre-connect => yes
max_connections => 20

; For PostgreSQL, also add:
; connect_timeout => 10
; negative_connection_cache => 300
"""

        # Generate pjsip.conf include
        pjsip_include = """; pjsip_realtime.conf - PJSIP Realtime Include
; Generated by Django Autodialer System
; Add this line to your main pjsip.conf: #include pjsip_realtime.conf

; Transport configuration (add to your main pjsip.conf)
[transport-udp]
type=transport
protocol=udp
bind=0.0.0.0:5060

; Realtime configuration is handled by extconfig.conf
; Endpoints, auths, and aors are stored in database tables
"""

        # Write files
        try:
            with open('/tmp/extconfig.conf', 'w') as f:
                f.write(extconfig_content)
            self.stdout.write('  ‚úÖ Generated /tmp/extconfig.conf')
            
            with open('/tmp/res_odbc.conf', 'w') as f:
                f.write(odbc_content)
            self.stdout.write('  ‚úÖ Generated /tmp/res_odbc.conf (template)')
            
            with open('/tmp/pjsip_realtime.conf', 'w') as f:
                f.write(pjsip_include)
            self.stdout.write('  ‚úÖ Generated /tmp/pjsip_realtime.conf')
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'  ‚ùå Error writing config files: {e}'))